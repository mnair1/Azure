AWSTemplateFormatVersion: 2010-09-09
Description: "Template for automating upstream etl"

Parameters:

  Env:
    Type: String
    Description: Name of Env (dev, qa, uat, prod, devops)
    AllowedValues:
      - dev
      - qa
      - uat
      - prod
      - devops

  Team:
    Type: String
    Description: Team Name
    Default: datafence

  LambdaName:
    Type: String
    Description: Lamba Name
    Default: devops-datafence-lambda-function-cf

  # LambdaMemory:
  #   Type: String
  #   Description: RAM of Lambda
  #   Default: '128'

  LambdaRuntime:
    Type: String
    Description: Runtime of Lambda
    Default: python3.7

  BucketName:
    Type: String
    Description: bucket name
    Default: s3-bucket-cf

Mappings:

  LambdaSpecs:
    LambdaMemory:
      dev: 128
      qa: 128
      uat: 256
      prod: 256
      devops: 512

Conditions:

  isDevops: !Equals [!Ref Env, "devops"] 


Resources:

  TriggerLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
              glue_client = boto3.client("glue")
              glue_client.start_job_run(
                  JobName="devops-datafence-spark-job") 
      Description: "Trigger Lambda Function for Datafence"
      Environment: 
         Variables: 
           Env: !Ref Env
      FunctionName: !Ref LambdaName
      Handler: index.lambda_handler
      MemorySize: !FindInMap [LambdaSpecs, LambdaMemory, !Ref Env]
      Role: !GetAtt TriggerLambdaIAMRole.Outputs.IAMRoleARN
      Runtime: !If [isDevops, "python2.7", !Ref LambdaRuntime] # AWS::NoValue
      Tags: 
        - Key: Environment
          Value: !Ref Env

  TriggerLambdaIAMRole:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Env
        Team: !Ref Team
        RoleName: lambda-role-cf
        AllowedServices: lambda.amazonaws.com
        ManagedPolicyArns: arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      TemplateURL: https://devops-datafence-s3-bucket-manual.s3.amazonaws.com/nested_stacks/iam-role.yaml #nested_stacks/iam-role.yaml

  TriggerLambdaIAMRolePolicy:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Env
        Team: !Ref Team
        PolicyName: lambda-role-policy-cf
        Roles: !GetAtt TriggerLambdaIAMRole.Outputs.IAMRoleName
        Effect: "Allow"
        ListOfActions: !Join
        - ','
        - - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
        Resource: "*"
      TemplateURL: https://devops-datafence-s3-bucket-manual.s3.amazonaws.com/nested_stacks/iam-policy.yaml #nested_stacks/iam-policy.yaml

  InvokeLambdaPerission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TriggerLambda.Arn
      SourceAccount: !Ref 'AWS::AccountId'
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${Env}-${Team}-${AWS::Region}-${AWS::AccountId}-${BucketName}'

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: InvokeLambdaPerission
    Properties:
      BucketName: !Sub ${Env}-${Team}-${AWS::Region}-${AWS::AccountId}-${BucketName}
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt TriggerLambda.Arn
            Event: 's3:ObjectCreated:*'
            Filter: 
              S3Key:
                Rules:
                  - Name: 'suffix'
                    Value: '.csv'

Outputs:

  TriggerLambdaName:
    Description: Name of triggered lambda
    Value: !Ref TriggerLambda

  LambdaRole:
    Description: Name of IAM Role of Lambda
    Value: !GetAtt TriggerLambdaIAMRole.Outputs.IAMRoleName

  S3Bucket:
    Description: Name of S3 Bucket
    Condition: isDevops
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-S3Bucket